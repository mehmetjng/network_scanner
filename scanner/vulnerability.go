// File: scanner/vulnerability.go
package scanner

import (
	"fmt"
	"strings"

	"network-scanner/models"
)

// AssessVulnerabilities performs comprehensive vulnerability analysis
func AssessVulnerabilities(device *models.Device) []models.Vulnerability {
	var vulns []models.Vulnerability

	// Check each open port
	for _, port := range device.OpenPorts {
		vulns = append(vulns, checkPortVulnerabilities(port)...)
		vulns = append(vulns, checkBannerVulnerabilities(port)...)
	}

	// Network-level vulnerabilities
	vulns = append(vulns, checkNetworkVulnerabilities(device)...)

	// Configuration issues
	vulns = append(vulns, checkMisconfigurations(device)...)

	// Service-specific vulnerabilities
	vulns = append(vulns, checkServiceVulnerabilities(device)...)

	// Default credentials check
	vulns = append(vulns, checkDefaultCredentials(device)...)

	return vulns
}

func checkPortVulnerabilities(port models.PortInfo) []models.Vulnerability {
	var vulns []models.Vulnerability

	switch port.Port {
	case 21:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "HIGH",
			Type:        "Insecure Protocol",
			Description: "FTP transmits credentials in plain text - susceptible to sniffing",
			Port:        21,
			CVE:         []string{"CWE-319", "CWE-522"},
			Remediation: "Replace FTP with SFTP (SSH File Transfer) or FTPS (FTP over SSL/TLS)",
			Impact:      "Credentials and data can be intercepted by attackers on the network",
		})

	case 23:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "CRITICAL",
			Type:        "Insecure Protocol",
			Description: "Telnet is completely unencrypted - all data transmitted in clear text",
			Port:        23,
			CVE:         []string{"CWE-319"},
			Remediation: "Disable Telnet immediately and replace with SSH (port 22)",
			Impact:      "Complete compromise of credentials and session data",
		})

	case 69:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "HIGH",
			Type:        "Insecure File Transfer",
			Description: "TFTP has no authentication and transmits in clear text",
			Port:        69,
			CVE:         []string{"CWE-306"},
			Remediation: "Disable TFTP if not needed, or restrict to trusted networks only",
			Impact:      "Unauthorized file access and potential system compromise",
		})

	case 80:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "MEDIUM",
			Type:        "Unencrypted Traffic",
			Description: "HTTP traffic is not encrypted - data transmitted in plain text",
			Port:        80,
			CVE:         []string{"CWE-311"},
			Remediation: "Implement HTTPS with valid SSL/TLS certificate (port 443)",
			Impact:      "Sensitive data exposure, session hijacking, man-in-the-middle attacks",
		})

	case 111:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "HIGH",
			Type:        "RPC Service Exposure",
			Description: "RPC services exposed - can reveal system information",
			Port:        111,
			CVE:         []string{"CVE-2017-8779"},
			Remediation: "Disable RPC if not needed, or restrict to localhost",
			Impact:      "Information disclosure, potential remote code execution",
		})

	case 135, 137, 138, 139, 445:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "CRITICAL",
			Type:        "SMB/NetBIOS Exposure",
			Description: "SMB/NetBIOS exposed - vulnerable to WannaCry, EternalBlue, ransomware",
			Port:        port.Port,
			CVE:         []string{"CVE-2017-0144", "CVE-2017-0145", "CVE-2020-0796"},
			Remediation: "Disable SMBv1, update Windows, restrict SMB access to trusted networks",
			Impact:      "Remote code execution, ransomware infection, data theft",
		})

	case 161, 162:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "HIGH",
			Type:        "SNMP Exposure",
			Description: "SNMP exposed - often uses default community strings (public/private)",
			Port:        port.Port,
			CVE:         []string{"CWE-798"},
			Remediation: "Use SNMPv3 with strong authentication, change default community strings",
			Impact:      "System information disclosure, potential configuration changes",
		})

	case 389, 636:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "MEDIUM",
			Type:        "Directory Service Exposure",
			Description: "LDAP exposed - may allow anonymous binding",
			Port:        port.Port,
			Remediation: "Disable anonymous binding, use LDAPS (636), implement access controls",
			Impact:      "Information disclosure, unauthorized directory access",
		})

	case 514:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "MEDIUM",
			Type:        "Syslog Exposure",
			Description: "Syslog service exposed - no authentication or encryption",
			Port:        514,
			Remediation: "Use syslog-ng or rsyslog with TLS, restrict to trusted hosts",
			Impact:      "Log tampering, information disclosure",
		})

	case 1433:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "HIGH",
			Type:        "Database Exposure",
			Description: "MS SQL Server exposed - target for brute force and SQL injection",
			Port:        1433,
			CVE:         []string{"CVE-2020-0618"},
			Remediation: "Restrict access to trusted IPs, use strong passwords, enable encryption",
			Impact:      "Data theft, unauthorized database access, potential server compromise",
		})

	case 1521:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "HIGH",
			Type:        "Database Exposure",
			Description: "Oracle database exposed to network",
			Port:        1521,
			Remediation: "Restrict to localhost or trusted networks, use strong authentication",
			Impact:      "Unauthorized database access, data exfiltration",
		})

	case 3306:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "HIGH",
			Type:        "Database Exposure",
			Description: "MySQL exposed - common target for attacks",
			Port:        3306,
			CVE:         []string{"CVE-2016-6662", "CVE-2021-2166"},
			Remediation: "Bind to localhost (127.0.0.1), use strong passwords, disable remote root",
			Impact:      "Database compromise, data theft, potential server takeover",
		})

	case 3389:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "CRITICAL",
			Type:        "RDP Exposure",
			Description: "RDP exposed - vulnerable to BlueKeep and brute-force attacks",
			Port:        3389,
			CVE:         []string{"CVE-2019-0708", "CVE-2020-0609", "CVE-2020-0610"},
			Remediation: "Use VPN, enable Network Level Authentication (NLA), use strong passwords, update Windows",
			Impact:      "Remote code execution, complete system compromise, ransomware",
		})

	case 5432:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "HIGH",
			Type:        "Database Exposure",
			Description: "PostgreSQL exposed to network",
			Port:        5432,
			CVE:         []string{"CVE-2019-10130"},
			Remediation: "Configure pg_hba.conf properly, use SSL, restrict to trusted IPs",
			Impact:      "Unauthorized database access, data manipulation",
		})

	case 5900:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "HIGH",
			Type:        "VNC Exposure",
			Description: "VNC exposed - often has weak or no authentication",
			Port:        5900,
			CVE:         []string{"CVE-2019-8262"},
			Remediation: "Use strong passwords, tunnel through SSH, disable if not needed",
			Impact:      "Remote desktop access, screen capture, complete system control",
		})

	case 6379:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "CRITICAL",
			Type:        "Redis Exposure",
			Description: "Redis exposed without authentication",
			Port:        6379,
			CVE:         []string{"CVE-2015-4335"},
			Remediation: "Enable authentication (requirepass), bind to localhost, use firewall",
			Impact:      "Remote code execution, data theft, cryptocurrency mining",
		})

	case 27017:
		vulns = append(vulns, models.Vulnerability{
			Severity:    "HIGH",
			Type:        "MongoDB Exposure",
			Description: "MongoDB exposed - often without authentication",
			Port:        27017,
			CVE:         []string{"CVE-2019-2386"},
			Remediation: "Enable authentication, bind to localhost, use firewall rules",
			Impact:      "Complete database compromise, data ransomware attacks",
		})
	}

	return vulns
}
func checkBannerVulnerabilities(port models.PortInfo) []models.Vulnerability {
	var vulns []models.Vulnerability
	banner := strings.ToLower(port.Banner)

	// Outdated software detection
	outdatedVersions := map[string]models.Vulnerability{
		"openssh_4": {
			Severity:    "CRITICAL",
			Description: "OpenSSH 4.x - multiple critical vulnerabilities",
			Type:        "Outdated Software",
			CVE:         []string{"CVE-2006-5051"},
			Remediation: "Update to OpenSSH 8.x or later",
		},
		"openssh_5": {
			Severity:    "HIGH",
			Description: "OpenSSH 5.x - known vulnerabilities",
			Type:        "Outdated Software",
			CVE:         []string{"CVE-2010-4755"},
			Remediation: "Update to OpenSSH 8.x or later",
		},
		"apache/2.2": {
			Severity:    "CRITICAL",
			Description: "Apache 2.2 - end-of-life, multiple vulnerabilities",
			Type:        "Outdated Software",
			CVE:         []string{"CVE-2017-15715"},
			Remediation: "Upgrade to Apache 2.4.x",
		},
		"openssl/1.0.1": {
			Severity:    "CRITICAL",
			Description: "OpenSSL 1.0.1 - Heartbleed vulnerability",
			Type:        "Outdated Software",
			CVE:         []string{"CVE-2014-0160"},
			Remediation: "Update to OpenSSL 1.1.1 or later",
		},
		"php/5": {
			Severity:    "CRITICAL",
			Description: "PHP 5.x - end-of-life, no security updates",
			Type:        "Outdated Software",
			CVE:         []string{"CVE-2019-11043"},
			Remediation: "Upgrade to PHP 7.4 or PHP 8.x",
		},
	}

	for version, vuln := range outdatedVersions {
		if strings.Contains(banner, version) {
			vuln.Port = port.Port
			vulns = append(vulns, vuln)
		}
	}

	// Check for information disclosure
	if len(banner) > 0 {
		vulns = append(vulns, models.Vulnerability{
			Severity:    "LOW",
			Type:        "Information Disclosure",
			Description: "Server banner reveals software version information",
			Port:        port.Port,
			Remediation: "Configure server to hide version information in banners",
			Impact:      "Attackers can target known vulnerabilities for specific versions",
		})
	}

	return vulns
}

func checkNetworkVulnerabilities(device *models.Device) []models.Vulnerability {
	var vulns []models.Vulnerability

	// Check for excessive open ports
	if len(device.OpenPorts) > 15 {
		vulns = append(vulns, models.Vulnerability{
			Severity: "HIGH",
			Type:     "Excessive Open Ports",
			Description: fmt.Sprintf("%d open ports detected - very large attack surface",
				len(device.OpenPorts)),
			Remediation: "Close all unnecessary services and ports, implement principle of least privilege",
			Impact:      "Large attack surface increases risk of exploitation",
		})
	} else if len(device.OpenPorts) > 10 {
		vulns = append(vulns, models.Vulnerability{
			Severity: "MEDIUM",
			Type:     "Excessive Open Ports",
			Description: fmt.Sprintf("%d open ports detected - attack surface could be reduced",
				len(device.OpenPorts)),
			Remediation: "Review and close unnecessary services and ports",
			Impact:      "Increased attack surface",
		})
	}

	return vulns
}

func checkMisconfigurations(device *models.Device) []models.Vulnerability {
	var vulns []models.Vulnerability

	hasHTTP := false
	hasHTTPS := false
	hasTelnet := false
	hasSSH := false
	hasFTP := false
	hasSFTP := false

	for _, port := range device.OpenPorts {
		switch port.Port {
		case 80, 8080, 8000, 8888:
			hasHTTP = true
		case 443, 8443:
			hasHTTPS = true
		case 23:
			hasTelnet = true
		case 22:
			hasSSH = true
		case 21:
			hasFTP = true
		case 115:
			hasSFTP = true
		}
	}

	// HTTP without HTTPS
	if hasHTTP && !hasHTTPS {
		vulns = append(vulns, models.Vulnerability{
			Severity:    "MEDIUM",
			Type:        "Missing HTTPS",
			Description: "Web server running without HTTPS encryption",
			Remediation: "Implement SSL/TLS certificate (Let's Encrypt is free)",
			Impact:      "Unencrypted data transmission, vulnerable to interception",
		})
	}

	// Telnet without SSH
	if hasTelnet && !hasSSH {
		vulns = append(vulns, models.Vulnerability{
			Severity:    "CRITICAL",
			Type:        "Missing SSH",
			Description: "Using Telnet without SSH alternative",
			Remediation: "Enable SSH and disable Telnet immediately",
			Impact:      "Credentials transmitted in clear text",
		})
	}

	// FTP without SFTP
	if hasFTP && !hasSFTP {
		vulns = append(vulns, models.Vulnerability{
			Severity:    "HIGH",
			Type:        "Insecure File Transfer",
			Description: "Using FTP without secure alternative",
			Remediation: "Enable SFTP or FTPS",
			Impact:      "Files and credentials transmitted without encryption",
		})
	}

	return vulns
}

func checkServiceVulnerabilities(device *models.Device) []models.Vulnerability {
	var vulns []models.Vulnerability

	// Check for dangerous service combinations
	hasDB := false
	hasWeb := false
	hasRDP := false

	for _, port := range device.OpenPorts {
		switch port.Port {
		case 3306, 5432, 1433, 27017, 6379:
			hasDB = true
		case 80, 443, 8080, 8443:
			hasWeb = true
		case 3389:
			hasRDP = true
		}
	}

	// Database and web on same host
	if hasDB && hasWeb {
		vulns = append(vulns, models.Vulnerability{
			Severity:    "MEDIUM",
			Type:        "Architecture Issue",
			Description: "Database and web server on same host",
			Remediation: "Consider separating database and web tiers",
			Impact:      "Web server compromise could lead to database access",
		})
	}

	// RDP exposed with other services
	if hasRDP && len(device.OpenPorts) > 3 {
		vulns = append(vulns, models.Vulnerability{
			Severity:    "HIGH",
			Type:        "Security Architecture",
			Description: "RDP exposed on multi-service host",
			Remediation: "Isolate RDP access through VPN or jump host",
			Impact:      "Increased risk if RDP is compromised",
		})
	}

	return vulns
}

func checkDefaultCredentials(device *models.Device) []models.Vulnerability {
	var vulns []models.Vulnerability

	// Services commonly found with default credentials
	defaultCredServices := map[int]string{
		3306:  "MySQL (root/root, root/password)",
		5432:  "PostgreSQL (postgres/postgres)",
		27017: "MongoDB (often no auth)",
		6379:  "Redis (often no auth)",
		1433:  "MSSQL (sa/sa)",
		5900:  "VNC (admin/admin)",
	}

	for _, port := range device.OpenPorts {
		if service, found := defaultCredServices[port.Port]; found {
			vulns = append(vulns, models.Vulnerability{
				Severity:    "HIGH",
				Type:        "Potential Default Credentials",
				Description: fmt.Sprintf("%s may be using default credentials", service),
				Port:        port.Port,
				Remediation: "Change all default passwords immediately to strong, unique passwords",
				Impact:      "Unauthorized access with widely-known credentials",
			})
		}
	}

	return vulns
}

// GuessOS performs basic OS fingerprinting
func GuessOS(device *models.Device) string {
	hasPort := func(port int) bool {
		for _, p := range device.OpenPorts {
			if p.Port == port {
				return true
			}
		}
		return false
	}

	// Windows indicators
	if hasPort(3389) || hasPort(445) || hasPort(135) || hasPort(139) {
		if hasPort(3389) && hasPort(445) {
			return "Windows Server"
		}
		return "Windows"
	}

	// Linux/Unix indicators
	if hasPort(22) {
		for _, p := range device.OpenPorts {
			banner := strings.ToLower(p.Banner)
			if strings.Contains(banner, "ubuntu") {
				return "Linux (Ubuntu)"
			}
			if strings.Contains(banner, "debian") {
				return "Linux (Debian)"
			}
			if strings.Contains(banner, "centos") {
				return "Linux (CentOS)"
			}
			if strings.Contains(banner, "red hat") {
				return "Linux (Red Hat)"
			}
		}
		return "Linux/Unix"
	}

	// macOS indicators
	if hasPort(548) || (hasPort(5900) && hasPort(88)) {
		return "macOS"
	}

	// Network devices
	if hasPort(23) && hasPort(80) && len(device.OpenPorts) < 5 {
		return "Network Device (Router/Switch)"
	}

	// Printer
	if hasPort(515) || hasPort(631) || hasPort(9100) {
		return "Printer/Print Server"
	}

	// IoT Device
	if len(device.OpenPorts) <= 3 && (hasPort(80) || hasPort(443)) {
		return "IoT Device"
	}

	return "Unknown"
}

// CalculateRiskScore calculates a risk score for a device (0-100)
func CalculateRiskScore(device *models.Device) int {
	score := 0

	// Score based on vulnerabilities
	for _, vuln := range device.Vulnerabilities {
		switch vuln.Severity {
		case "CRITICAL":
			score += 25
		case "HIGH":
			score += 15
		case "MEDIUM":
			score += 8
		case "LOW":
			score += 3
		}
	}

	// Additional scoring
	if len(device.OpenPorts) > 15 {
		score += 10
	} else if len(device.OpenPorts) > 10 {
		score += 5
	}

	// Cap at 100
	if score > 100 {
		score = 100
	}

	return score
}
